AWSTemplateFormatVersion: 2010-09-09
Description: Creates the core services needed for SyntheticSun such as Lambda and Sagemaker assets. Deploy this last.
Parameters:
  ArtifactsBucketName:
    Type: String
    Description: Name of the S3 bucket where SyntheticSun artifacts were uploaded during Stage 1 of the readme
  ElasticsearchUrl:
    Type: String
    Description: SyntheticSun-ES domain elasticsearch URL. REMOVE THE TRAILING SLASH.
  RequestsLambdaLayer:
    Type: String
    Description: Python 3.7 or 3.8 Lambda Layer ARN for the Requests module. UPDATE FOR YOUR REGION
    Default: arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-requests:5
  Aws4AuthLambdaLayer:
    Type: String
    Description: Python 3.7 or 3.8 Lambda Layer ARN for the AWS4Auth-Requests module created during Stage 1 of the readme. Ensure you also copy the version number.
  CloudTrailBucketName:
    Type: String
    Description: Name of the S3 bucket where CloudTrail logs are sent to in your account
  IpInsightsNotebookUri:
    Type: String
    Description: The URI of the Sagmaker IP Insights image. UPDATE FOR YOUR REGION
    Default: 382416733822.dkr.ecr.us-east-1.amazonaws.com/ipinsights:1
  ALBAccessLogS3Bucket:
    Type: String
    Description: The bucket that ALB Access Logs are published to
  WAFLogS3Bucket:
    Type: String
    Description: The bucket that WAF Logs are published to
  VPCFlowLogCWL:
    Type: String
    Description: The CloudWatch Logs Group that VPC Flow Logs are published to
  SuricataDNSLogGrp:
    Type: String
    Description: The CloudWatch Logs Group that Suricata DNS logs are published to
    Default: Suricata-DNS-Logs
  SuricataNSMLogGrp:
    Type: String
    Description: The CloudWatch Logs Group that Suricata NSM logs are published to
    Default: Suricata-Not-DNS-Logs
Resources:
  HoneypotHTTPApi:
    Type: AWS::ApiGatewayV2::Api
    DependsOn: HoneypotLambda
    Properties:
      Name: SyntheticSun-Honeypot-APIGW
      Description: Lambda-backed API Gateway honeypot for SyntheticSun - Managed by CloudFormation
      ProtocolType: HTTP
      Target: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SyntheticSun-APIGW-Honeypot/invocations'
  HoneypotApiGwPermission:
    Type: AWS::Lambda::Permission
    DependsOn: HoneypotHTTPApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HoneypotLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HoneypotHTTPApi}/*/*/'
  HoneypotLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-APIGW-Honeypot
      Description: Responds with utter nonsense to a HTTP API Gateway - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt HoneypotLambdaExecRole.Arn
      Runtime: python3.7
      Timeout: 15
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 411,'body': json.dumps('Definitely not a honeypot you just hit')}
  HoneypotLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HoneypotLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  APIGWLogGrp: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: APIGWLogGrp
      RetentionInDays: 7
  APIGWCWLSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: APIGWLambdaPermission
    Properties: 
      LogGroupName: !Ref APIGWLogGrp
      DestinationArn: !GetAtt APIGWParserLambda.Arn
      FilterPattern: ""
  APIGWLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt APIGWParserLambda.Arn
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${APIGWLogGrp}:*'
  APIGWParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-APIGWParserLambda
      Description: >-
        Parses, enriches and evaluates API GW access logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt APIGWParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          IP_IOC_DYNAMODB_TABLE: IP-IOC-Threat-Intel
          MISP_DOMAIN_IOC_DDB_TABLE: Domain-IOC-Threat-Intel
          ANOMALY_DYNAMODB_TABLE: IP-Insights-Anomalies
          ELASTICSEARCH_URL: !Ref ElasticsearchUrl
          SAGEMAKER_ENDPOINT: !GetAtt WAFIPInsightsEndpoint.EndpointName
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-apigw-function.zip
  APIGWParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: APIGWParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: APIGWParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: 
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es/*'
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-Insights-Anomalies'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Domain-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            Resource: !Ref WAFIPInsightsEndpoint
  CTLogParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: CTLogParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: CTLogParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-Insights-Anomalies'
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: 
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es/*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CloudTrailBucketName
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CloudTrailBucketName
                  - '*'
          - Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            Resource: !Ref CTIPInsightsEndpoint
  CTLogParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-CTLogParserLambda
      Description: >-
        Parses, enriches and evaluates CloudTrail logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt CTLogParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          ANOMALY_DYNAMODB_TABLE: IP-Insights-Anomalies
          SAGEMAKER_ENDPOINT: !GetAtt CTIPInsightsEndpoint.EndpointName
          ELASTICSEARCH_URL: !Ref ElasticsearchUrl
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-cloudtrail-function.zip 
  CTLogLambdaParserFunctionS3Event:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CTLogParserLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${CloudTrailBucketName}'
  WAFLogParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: WAFLogParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: WAFLogParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: 
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es/*'
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-Insights-Anomalies'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Domain-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            Resource: !Ref WAFIPInsightsEndpoint
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
              - !Sub 'arn:aws:s3:::${WAFLogS3Bucket}'
              - !Sub 'arn:aws:s3:::${WAFLogS3Bucket}/*'
  WAFLogParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-WAFLogParserLambda
      Description: >-
        Parses, enriches and evaluates WAF logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt WAFLogParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          IP_IOC_DYNAMODB_TABLE: IP-IOC-Threat-Intel
          DOMAIN_IOC_DYNAMODB_TABLE: Domain-IOC-Threat-Intel
          ANOMALY_DYNAMODB_TABLE: IP-Insights-Anomalies
          SAGEMAKER_ENDPOINT: !GetAtt WAFIPInsightsEndpoint.EndpointName
          ELASTICSEARCH_URL: !Ref ElasticsearchUrl
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-waf-function.zip
  WAFLogLambdaParserFunctionS3Event:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WAFLogParserLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${WAFLogS3Bucket}'
  FlowLogParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: FlowLogParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: FlowLogParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: 
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es/*'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            Resource: '*'
  FlowLogCWLSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: FlowLogLambdaPermission
    Properties:
      LogGroupName: !Ref VPCFlowLogCWL
      DestinationArn: !GetAtt FlowLogParserLambda.Arn
      FilterPattern: ""
  FlowLogLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FlowLogParserLambda.Arn
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${VPCFlowLogCWL}:*'
  FlowLogParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-FlowLogParserLambda
      Description: >-
        Parses, enriches and evaluates VPC Flow logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt FlowLogParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          IP_IOC_DYNAMODB_TABLE: IP-IOC-Threat-Intel
          ELASTICSEARCH_URL: !Ref ElasticsearchUrl
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-vpcflow-function.zip
  ALBLogParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: ALBLogParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ALBLogParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:DescribeLoadBalancerAttributes
            - elasticloadbalancing:DescribeLoadBalancers
            Resource: '*'
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: 
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es/*'
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-Insights-Anomalies'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Domain-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ALBAccessLogS3Bucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ALBAccessLogS3Bucket
                  - '*'
  ALBLogLambdaParserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-ALBLogParserLambda
      Description: >-
        Parses, enriches and evaluates ALB access logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt ALBLogParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          IP_IOC_DYNAMODB_TABLE: IP-IOC-Threat-Intel
          DOMAIN_IOC_DYNAMODB_TABLE: Domain-IOC-Threat-Intel
          ANOMALY_DYNAMODB_TABLE: IP-Insights-Anomalies
          ELASTICSEARCH_URL: !Ref ElasticsearchUrl
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-alblog-function.zip
  ALBLogLambdaParserFunctionS3Event:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ALBLogLambdaParserFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${ALBAccessLogS3Bucket}'
  SuricataDNSCWLSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: SuricataDNSLambdaPermission
    Properties: 
      LogGroupName: !Ref SuricataDNSLogGrp
      DestinationArn: !GetAtt SuricataDNSParserLambda.Arn
      FilterPattern: ""
  SuricataDNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SuricataDNSParserLambda.Arn
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SuricataDNSLogGrp}:*'
  SuricataNSMCWLSubscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: SuricataNSMLambdaPermission
    Properties: 
      LogGroupName: !Ref SuricataNSMLogGrp
      DestinationArn: !GetAtt SuricataNSMParserLambda.Arn
      FilterPattern: ""
  SuricataNSMLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SuricataNSMParserLambda.Arn
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SuricataNSMLogGrp}:*'
  SuricataDNSParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-SuricataDNSLambda
      Description: >-
        Parses and sends Suricata DNS logs to Elasticsearch Service - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt SuricataParserLambdaExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          ELASTICSEARCH_URL: !Ref ElasticsearchUrl
      Code:
        ZipFile: |
          import requests
          from requests_aws4auth import AWS4Auth
          import time
          import os
          import json
          import boto3
          import ipaddress
          import socket
          import base64
          import zlib
          import datetime
          def lambda_handler(event, context):
              # create variables for aws4auth, es and ddb
              awsRegion = os.environ['AWS_REGION']
              accessKey = os.environ['AWS_ACCESS_KEY_ID']
              secretAccessKey = os.environ['AWS_SECRET_ACCESS_KEY']
              seshToken = os.environ['AWS_SESSION_TOKEN']
              host = os.environ['ELASTICSEARCH_URL']
              index = 'suricata-dns'
              # create auth token for ES
              awsAuthToken = AWS4Auth(accessKey, secretAccessKey, awsRegion, 'es', session_token=seshToken)
              # create requests items
              url = host + '/' + index + '/' + '_doc/'
              headers = { "Content-Type": "application/json" }
              # grab the 'awslogs' part of the CWL event stream
              data = event.get('awslogs', {}).get('data')
              # Base64 Decode, decompress with ZLIB, load into a dict with json.loads
              records = json.loads(zlib.decompress(base64.b64decode(data), 16 + zlib.MAX_WBITS))
              # Loop through the flow log message
              for flows in records['logEvents']:
                  dnsLog = str(flows['message'])
                  r = requests.post(url, auth=awsAuthToken, data=dnsLog, headers=headers)
                  print(r.json())
  SuricataNSMParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-SuricataNSMLambda
      Description: >-
        Parses and sends Suricata NSM logs to Elasticsearch Service - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt SuricataParserLambdaExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          ELASTICSEARCH_URL: !Ref ElasticsearchUrl
      Code:
        ZipFile: |
          import requests
          from requests_aws4auth import AWS4Auth
          import time
          import os
          import json
          import boto3
          import ipaddress
          import socket
          import base64
          import zlib
          import datetime
          def lambda_handler(event, context):
              # create variables for aws4auth, es and ddb
              awsRegion = os.environ['AWS_REGION']
              accessKey = os.environ['AWS_ACCESS_KEY_ID']
              secretAccessKey = os.environ['AWS_SECRET_ACCESS_KEY']
              seshToken = os.environ['AWS_SESSION_TOKEN']
              host = os.environ['ELASTICSEARCH_URL']
              index = 'suricata-nsm'
              # create auth token for ES
              awsAuthToken = AWS4Auth(accessKey, secretAccessKey, awsRegion, 'es', session_token=seshToken)
              # create requests items
              url = host + '/' + index + '/' + '_doc/'
              headers = { "Content-Type": "application/json" }
              # grab the 'awslogs' part of the CWL event stream
              data = event.get('awslogs', {}).get('data')
              # Base64 Decode, decompress with ZLIB, load into a dict with json.loads
              records = json.loads(zlib.decompress(base64.b64decode(data), 16 + zlib.MAX_WBITS))
              # Loop through the flow log message
              for flows in records['logEvents']:
                  suricataLogs = str(flows['message'])
                  r = requests.post(url, auth=awsAuthToken, data=suricataLogs, headers=headers)
                  print(r.json())
  SuricataParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: SuricataParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SuricataParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            Resource: '*'
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: 
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es/*'
  WAFIPInsightsModel:
    Type: AWS::SageMaker::Model
    Properties:
      PrimaryContainer:
        Image: !Ref IpInsightsNotebookUri
        ModelDataUrl: !Sub 's3://${ArtifactsBucketName}/waf-model.tar.gz'
      ExecutionRoleArn: !GetAtt IPInsightsExecutionRole.Arn
  CTIPInsightsModel:
    Type: AWS::SageMaker::Model
    Properties:
      PrimaryContainer:
        Image: !Ref IpInsightsNotebookUri
        ModelDataUrl: !Sub 's3://${ArtifactsBucketName}/ct-model.tar.gz'
      ExecutionRoleArn: !GetAtt IPInsightsExecutionRole.Arn
  WAFIPInsightsEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: ml.m5.large
          ModelName: !GetAtt WAFIPInsightsModel.ModelName
          VariantName: !GetAtt WAFIPInsightsModel.ModelName
  CTIPInsightsEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: ml.m5.large
          ModelName: !GetAtt CTIPInsightsModel.ModelName
          VariantName: !GetAtt CTIPInsightsModel.ModelName
  WAFIPInsightsEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: SyntheticSun-WAF-IPInsights-Endpt
      EndpointConfigName: !GetAtt WAFIPInsightsEndpointConfig.EndpointConfigName
  CTIPInsightsEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: SyntheticSun-CT-IPInsights-Endpt
      EndpointConfigName: !GetAtt CTIPInsightsEndpointConfig.EndpointConfigName
  IPInsightsExecutionRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: SyntheticSun-SM-Model-Role
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - sagemaker.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: SynthticSun-SM-Model-Policy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:DescribeLogStreams
                  - kms:Decrypt
                  - s3:GetObject
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  SecHubStreamLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'sechub-firehose-fails-${AWS::Region}-${AWS::AccountId}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  SecHubStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: syntheticsun-sechub-to-es
      DeliveryStreamType: DirectPut
      ElasticsearchDestinationConfiguration:
        BufferingHints: 
          IntervalInSeconds: 90
          SizeInMBs: 5
        CloudWatchLoggingOptions: 
          Enabled: true
          LogGroupName: deliverystream
          LogStreamName: elasticsearchDelivery
        DomainARN: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
        IndexName: security-hub
        IndexRotationPeriod: OneMonth
        RetryOptions: 
          DurationInSeconds: 60
        RoleARN: !GetAtt SecHubStreamRole.Arn
        S3BackupMode: FailedDocumentsOnly
        S3Configuration: 
          BucketARN: !GetAtt SecHubStreamLoggingBucket.Arn
          BufferingHints: 
            IntervalInSeconds: 60
            SizeInMBs: 50
          CompressionFormat: GZIP
          RoleARN: !GetAtt SecHubStreamRole.Arn
          CloudWatchLoggingOptions: 
            Enabled: true
            LogGroupName: firehose/syntheticsun-sechub-to-es
            LogStreamName: securityhub-es-logs
  SecHubStreamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SecHubFirehoseRole
      Policies:
      - PolicyName: SecHubFirehoseRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
              - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SecHubStreamLoggingBucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SecHubStreamLoggingBucket
                  - '*'
          - Effect: Allow
            Action:
              - es:DescribeElasticsearchDomain
              - es:DescribeElasticsearchDomains
              - es:DescribeElasticsearchDomainConfig
              - es:ESHttp*
            Resource: 
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es/*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: firehosetrust
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Sub '${AWS::AccountId}'
  SecHubToFirehoseEventRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SyntheticSun-SecHub2Firehose-Role
      Policies:
      - PolicyName: SyntheticSun-SecHub2Firehose-RolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Resource: !GetAtt SecHubStream.Arn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: events.amazonaws.com }
          Action:
            - sts:AssumeRole
  SecHubToFirehoseEvent: 
    Type: AWS::Events::Rule
    Properties:
      Name: SyntheticSun-SecHub2Firehose
      Description: Sends matching Security Hub events to Elasticsearch for SyntheticSun - Managed by CloudFormation
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Imported
        detail: 
          findings:
            ProductFields:
              aws/securityhub/SeverityLabel:
              - LOW
              - MEDIUM
              - HIGH
              - CRITICAL
      State: ENABLED
      Targets: 
        - 
          Arn: !GetAtt SecHubStream.Arn
          Id: sechubtrigger
          RoleArn: !GetAtt SecHubToFirehoseEventRole.Arn