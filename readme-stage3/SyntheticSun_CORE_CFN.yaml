AWSTemplateFormatVersion: 2010-09-09
Description: Creates the core services needed for SyntheticSun such as Lambda and Sagemaker assets. Deploy this last.
Parameters:
  ArtifactsBucketName:
    Type: String
    Description: Name of the S3 bucket where SyntheticSun artifacts were uploaded during Stage 1 of the readme
  KibanaUrl:
    Type: String
    Description: URL of the Kibana endpoint for the SyntheticSun-ES domain
  RequestsLambdaLayer:
    Type: String
    Description: Python 3.7 or 3.8 Lambda Layer ARN for the Requests module. Update for your region
    Default: arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-requests:5
  Aws4AuthLambdaLayer:
    Type: String
    Description: Python 3.7 or 3.8 Lambda Layer ARN for the AWS4Auth-Requests module created during Stage 1 of the readme
  CloudTrailBucketName:
    Type: String
    Description: Name of the S3 bucket where CloudTrail logs are sent to in your account
  IpInsightsNotebookUri:
    Type: String
    Description: The URI of the Sagmaker IP Insights image
    Default: 382416733822.dkr.ecr.us-east-1.amazonaws.com/ipinsights:1
  ALBAccessLogS3Bucket:
    Type: String
    Description: The bucket that ALB Access Logs are published to
  WAFLogS3Bucket:
    Type: String
    Description: The bucket that WAF Logs are published to
  VPCFlowLogCWL:
    Type: String
    Description: The CloudWatch Logs Group that VPC Flow Logs are published to
  SuricataDNSLogGrp:
    Type: String
    Description: The CloudWatch Logs Group that Suricata DNS logs are published to
    Default: Suricata-DNS-Logs
  SuricataNSMLogGrp:
    Type: String
    Description: The CloudWatch Logs Group that Suricata NSM logs are published to
    Default: Suricata-NSM-Logs
Resources:
  CTLogParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: CTLogParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: CTLogParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-Insights-Anomalies'
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CloudTrailBucketName
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref CloudTrailBucketName
                  - '*'
          - Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            Resource: !Ref IPInsightsEndpoint
  CTLogParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-CTLogParserLambda
      Description: >-
        Parses, enriches and evaluates CloudTrail logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt CTLogParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          ANOMALY_DYNAMODB_TABLE: IP-Insights-Anomalies
          SAGEMAKER_ENDPOINT: !GetAtt IPInsightsEndpoint.EndpointName
          ELASTICSEARCH_URL: !Ref KibanaUrl
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-cloudtrail-lambda-function.zip
  CTLogLambdaParserFunctionS3Event:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CTLogParserLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${CloudTrailBucketName}'
  WAFLogParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: WAFLogParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: WAFLogParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-Insights-Anomalies'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Domain-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            Resource: !Ref IPInsightsEndpoint
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
              - !Sub 'arn:aws:s3:::${WAFLogS3Bucket}'
              - !Sub 'arn:aws:s3:::${WAFLogS3Bucket}/*'
  WAFLogParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-WAFLogParserLambda
      Description: >-
        Parses, enriches and evaluates WAF logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt WAFLogParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          IP_IOC_DYNAMODB_TABLE: IP-IOC-Threat-Intel
          DOMAIN_IOC_DYNAMODB_TABLE: Domain-IOC-Threat-Intel
          ANOMALY_DYNAMODB_TABLE: IP-Insights-Anomalies
          SAGEMAKER_ENDPOINT: !GetAtt IPInsightsEndpoint.EndpointName
          ELASTICSEARCH_URL: !Ref KibanaUrl
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-waf-lambda-function.zip
  WAFLogLambdaParserFunctionS3Event:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WAFLogParserLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${WAFLogS3Bucket}'
  FlowLogParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: FlowLogParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: FlowLogParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-IOC-Threat-Intel'
  CWLSubscriptionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: logstrust
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: sts:AssumeRole
      RoleName: CWLSubscriptionRole
      Policies:
      - PolicyName: CWLSubscriptionRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
  FlowLogCWLSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      RoleArn: !GetAtt CWLSubscriptionRole.Arn
      LogGroupName: !Ref VPCFlowLogCWL
      DestinationArn: !GetAtt FlowLogParserLambda.Arn
  FlowLogParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-FlowLogParserLambda
      Description: >-
        Parses, enriches and evaluates VPC Flow logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt FlowLogParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          IP_IOC_DYNAMODB_TABLE: IP-IOC-Threat-Intel
          ELASTICSEARCH_URL: !Ref KibanaUrl
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-vpcflow-lambda-function.zip
  ALBLogParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: ALBLogParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: WAFLogParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-Insights-Anomalies'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IP-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Domain-IOC-Threat-Intel'
          - Effect: Allow
            Action:
            - sagemaker:InvokeEndpoint
            Resource: !Ref IPInsightsEndpoint
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ALBAccessLogS3Bucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ALBAccessLogS3Bucket
                  - '*'
  ALBLogLambdaParserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-ALBLogParserLambda
      Description: >-
        Parses, enriches and evaluates ALB access logs before sending them to Elasticsearch Service - Managed by CloudFormation
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      Role: !GetAtt ALBLogParserLambdaExecRole.Arn
      Runtime: python3.8
      Timeout: 720
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          IP_IOC_DYNAMODB_TABLE: IP-IOC-Threat-Intel
          DOMAIN_IOC_DYNAMODB_TABLE: Domain-IOC-Threat-Intel
          ANOMALY_DYNAMODB_TABLE: IP-Insights-Anomalies
          SAGEMAKER_ENDPOINT: !GetAtt IPInsightsEndpoint.EndpointName
          ELASTICSEARCH_URL: !Ref KibanaUrl
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: syntheticsun-vpcflow-lambda-function.zip
  ALBLogLambdaParserFunctionS3Event:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ALBLogLambdaParserFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${ALBAccessLogS3Bucket}'
  SuricataDNSCWLSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      RoleArn: !GetAtt CWLSubscriptionRole.Arn
      LogGroupName: !Ref SuricataDNSLogGrp
      DestinationArn: !GetAtt SuricataDNSParserLambda.Arn
  SuricataNSMCWLSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      RoleArn: !GetAtt CWLSubscriptionRole.Arn
      LogGroupName: !Ref SuricataNSMLogGrp
      DestinationArn: !GetAtt SuricataNSMParserLambda.Arn
  SuricataDNSParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-SuricataDNSLambda
      Description: >-
        Parses and sends Suricata DNS logs to Elasticsearch Service - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt SuricataParserLambdaExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          ELASTICSEARCH_URL: !Ref KibanaUrl
      Code:
        ZipFile: |
          import requests
          from requests_aws4auth import AWS4Auth
          import time
          import os
          import json
          import boto3
          import ipaddress
          import socket
          import base64
          import zlib
          import datetime
          def lambda_handler(event, context):
              # create variables for aws4auth, es and ddb
              awsRegion = os.environ['AWS_REGION']
              accessKey = os.environ['AWS_ACCESS_KEY_ID']
              secretAccessKey = os.environ['AWS_SECRET_ACCESS_KEY']
              seshToken = os.environ['AWS_SESSION_TOKEN']
              host = os.environ['ELASTICSEARCH_URL']
              index = 'suricata-dns'
              # create auth token for ES
              awsAuthToken = AWS4Auth(accessKey, secretAccessKey, awsRegion, 'es', session_token=seshToken)
              # create requests items
              url = host + '/' + index + '/' + '_doc/'
              headers = { "Content-Type": "application/json" }
              # grab the 'awslogs' part of the CWL event stream
              data = event.get('awslogs', {}).get('data')
              # Base64 Decode, decompress with ZLIB, load into a dict with json.loads
              records = json.loads(zlib.decompress(base64.b64decode(data), 16 + zlib.MAX_WBITS))
              # Loop through the flow log message
              for flows in records['logEvents']:
                  dnsLog = str(flows['message'])
                  r = requests.post(url, auth=awsAuthToken, data=dnsLog, headers=headers)
                  print(r.json())
  SuricataNSMParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SyntheticSun-SuricataNSMLambda
      Description: >-
        Parses and sends Suricata NSM logs to Elasticsearch Service - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt SuricataParserLambdaExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref Aws4AuthLambdaLayer
      Environment:
        Variables:
          ELASTICSEARCH_URL: !Ref KibanaUrl
      Code:
        ZipFile: |
          import requests
          import requests
          from requests_aws4auth import AWS4Auth
          import time
          import os
          import json
          import boto3
          import ipaddress
          import socket
          import base64
          import zlib
          import datetime
          def lambda_handler(event, context):
              # create variables for aws4auth, es and ddb
              awsRegion = os.environ['AWS_REGION']
              accessKey = os.environ['AWS_ACCESS_KEY_ID']
              secretAccessKey = os.environ['AWS_SECRET_ACCESS_KEY']
              seshToken = os.environ['AWS_SESSION_TOKEN']
              host = os.environ['ELASTICSEARCH_URL']
              index = 'suricata-nsm'
              # create auth token for ES
              awsAuthToken = AWS4Auth(accessKey, secretAccessKey, awsRegion, 'es', session_token=seshToken)
              # create requests items
              url = host + '/' + index + '/' + '_doc/'
              headers = { "Content-Type": "application/json" }
              # grab the 'awslogs' part of the CWL event stream
              data = event.get('awslogs', {}).get('data')
              # Base64 Decode, decompress with ZLIB, load into a dict with json.loads
              records = json.loads(zlib.decompress(base64.b64decode(data), 16 + zlib.MAX_WBITS))
              # Loop through the flow log message
              for flows in records['logEvents']:
                  suricataLogs = str(flows['message'])
                  r = requests.post(url, auth=awsAuthToken, data=suricataLogs, headers=headers)
                  print(r.json())
  SuricataParserLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: lambdatrust
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: SuricataParserLambdaExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SuricataParserLambdaExecRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - es:ESHttpPost
            - es:ESHttpPut
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/syntheticsun-es'
  IPInsightsModel:
    Type: AWS::SageMaker::Model
    Properties:
      PrimaryContainer:
        Image: !Ref IpInsightsNotebookUri
        ModelDataUrl: !Sub 'S3://${ArtifactsBucketName}/model.tar.gz'
      ExecutionRoleArn: !GetAtt IPInsightsExecutionRole.Arn
  IPInsightsEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: ml.m5.large
          ModelName: !GetAtt IPInsightsModel.ModelName
          VariantName: !GetAtt IPInsightsModel.ModelName
  IPInsightsEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: SyntheticSun-IPInsights-Endpt
      EndpointConfigName: !GetAtt IPInsightsEndpointConfig.EndpointConfigName
  IPInsightsExecutionRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - sagemaker.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: sagemakerpolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action: '*'
                Resource: '*'